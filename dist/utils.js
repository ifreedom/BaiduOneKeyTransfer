// Generated by CoffeeScript 1.10.0
(function() {
  var DEFAULT_ALPHABET, DEFAULT_BLOCK_SIZE, MAPPING, MASK, MIN_LENGTH, decodeShareCode, encodeShareCode, genPassword, inspect, j, results, setShareCodeConfig, util;

  util = require('util');

  DEFAULT_ALPHABET = 'abAcBdCDEefgFGHIhijkJKLlmMnNopqrOPQstuvwxyz';

  DEFAULT_BLOCK_SIZE = 24;

  MIN_LENGTH = 5;

  MASK = (1 << DEFAULT_BLOCK_SIZE) - 1;

  MAPPING = (function() {
    results = [];
    for (var j = 0; 0 <= DEFAULT_BLOCK_SIZE ? j < DEFAULT_BLOCK_SIZE : j > DEFAULT_BLOCK_SIZE; 0 <= DEFAULT_BLOCK_SIZE ? j++ : j--){ results.push(j); }
    return results;
  }).apply(this).reverse();

  inspect = function(obj) {
    return console.log(util.inspect(obj));
  };

  setShareCodeConfig = function(config) {
    var k, results1;
    MIN_LENGTH = config.minLength;
    DEFAULT_ALPHABET = config.alphabet;
    DEFAULT_BLOCK_SIZE = config.blockSize;
    MASK = (1 << DEFAULT_BLOCK_SIZE) - 1;
    return MAPPING = (function() {
      results1 = [];
      for (var k = 0; 0 <= DEFAULT_BLOCK_SIZE ? k < DEFAULT_BLOCK_SIZE : k > DEFAULT_BLOCK_SIZE; 0 <= DEFAULT_BLOCK_SIZE ? k++ : k--){ results1.push(k); }
      return results1;
    }).apply(this).reverse();
  };

  encodeShareCode = function(n) {
    var a, b, code, enbase, i, k, len, nn, r;
    nn = DEFAULT_ALPHABET.length;
    enbase = function(x) {
      if (x < nn) {
        return DEFAULT_ALPHABET[x];
      } else {
        return enbase(Math.floor(x / nn)) + DEFAULT_ALPHABET[x % nn];
      }
    };
    r = 0;
    a = n & MASK;
    for (i = k = 0, len = MAPPING.length; k < len; i = ++k) {
      b = MAPPING[i];
      if (a & (1 << i)) {
        r |= 1 << b;
      }
    }
    code = enbase((n & ~MASK) | r);
    if (code.length >= MIN_LENGTH) {
      return code;
    } else {
      return DEFAULT_ALPHABET[0].repeat(MIN_LENGTH - code.length) + code;
    }
  };

  decodeShareCode = function(code) {
    var a, b, c, i, k, l, len, len1, n, nn, r, ref;
    nn = DEFAULT_ALPHABET.length;
    r = 0;
    ref = code.split('').reverse();
    for (i = k = 0, len = ref.length; k < len; i = ++k) {
      c = ref[i];
      r += DEFAULT_ALPHABET.indexOf(c) * (Math.pow(nn, i));
    }
    a = r & MASK;
    n = 0;
    for (i = l = 0, len1 = MAPPING.length; l < len1; i = ++l) {
      b = MAPPING[i];
      if (a & (1 << b)) {
        n |= 1 << i;
      }
    }
    return (r & ~MASK) | n;
  };

  genPassword = function() {
    var _;
    return ((function() {
      var k, results1;
      results1 = [];
      for (_ = k = 1; k <= 4; _ = ++k) {
        results1.push((Math.random() * 16 | 0).toString(16));
      }
      return results1;
    })()).join('');
  };

  exports.inspect = inspect;

  exports.genPassword = genPassword;

  exports.setShareCodeConfig = setShareCodeConfig;

  exports.encodeShareCode = encodeShareCode;

  exports.decodeShareCode = decodeShareCode;

}).call(this);
