// Generated by CoffeeScript 1.10.0
(function() {
  var BDP, app, bodyParser, checkUserLogined, config, cookieParser, db, dbPath, express, fs, logErr, orm, path, router, utils, uuid;

  fs = require('fs');

  path = require('path');

  express = require('express');

  cookieParser = require('cookie-parser');

  bodyParser = require('body-parser');

  orm = require('orm');

  uuid = require('node-uuid');

  BDP = require('./bdp');

  utils = require('./utils');

  logErr = function(err) {
    utils.inspect(err);
    return console.log(err.stack);
  };

  config = JSON.parse(fs.readFileSync('config.json', 'utf8'));

  app = express();

  app.set('trust proxy', 'loopback');

  app.set('view engine', 'jade');

  app.set('views', __dirname + '/../views');

  router = express.Router();

  router.use(express["static"](__dirname + '/../public'));

  router.use(express["static"](__dirname + '/../bower_components'));

  router.use(cookieParser(config.secret));

  router.use(bodyParser.urlencoded({
    extended: true
  }));

  dbPath = '';

  if (app.get('env') === 'development') {
    dbPath = path.resolve('data.db');
    dbPath = "sqlite://" + dbPath;
  } else {
    db = config.db;
    dbPath = "mysql://" + db.username + ":" + db.password + "@" + db.host + "/" + db.database;
  }

  router.use(orm.express(dbPath, {
    define: require('./models')
  }));

  router.use(function(req, res, next) {
    res.locals.baseUrl = req.baseUrl;
    return next();
  });

  router.get("/", function(req, res) {
    return res.render('index', {
      page: 'share'
    });
  });

  router.get("/transfer/:code", function(req, res) {
    return res.render('index', {
      page: 'transfer'
    });
  });

  checkUserLogined = function(req, res, cb) {
    var Users, uk;
    uk = req.signedCookies.uk;
    if (uk) {
      Users = req.models.Users;
      return Users.findOne({
        uk: uk
      }, function(err, user) {
        if (err) {
          return res.json({
            err: 'system_error'
          });
        }
        if (user) {
          return cb(null, user);
        } else {
          return res.json({
            err: 'not_login'
          });
        }
      });
    } else {
      return res.json({
        err: 'not_login'
      });
    }
  };

  router.get("/a/checklogin", function(req, res) {
    return checkUserLogined(req, res, function(err, user) {
      var bdp;
      bdp = BDP(user.cookie);
      return bdp.getQuota(function(err) {
        if (err) {
          if (err.name === "RESTError") {
            return res.json({
              err: 'need_login',
              username: user.username
            });
          } else {
            return res.json({
              err: 'unknown'
            });
          }
        } else {
          return res.json({
            err: 'ok'
          });
        }
      });
    });
  });

  router.post("/a/login", function(req, res) {
    var bdp, captcha, codeString, onLoginEnd, password, savePassword, username;
    username = req.body.username;
    password = req.body.password;
    if (!(username && password)) {
      return res.json({
        err: 'invalid_args'
      });
    }
    savePassword = req.body['save-password'] != null ? password : '';
    codeString = req.body.codeString || '';
    captcha = req.body.captcha || '';
    onLoginEnd = function(err, uk) {
      if (err) {
        if (err.name === "LoginError") {
          switch (err.errno) {
            case 1:
            case 2:
            case 4:
            case 7:
              return res.json({
                err: 'other',
                msg: "帐号或密码有误！"
              });
            case 6:
            case 500002:
            case 500018:
              return res.json({
                err: 'verify_error',
                codeString: err.codeString,
                verifyImgUrl: bdp.getVerifyImageUrl(err.codeString)
              });
            case 3:
            case 257:
            case 200010:
              return res.json({
                err: 'need_verify',
                codeString: err.codeString,
                verifyImgUrl: bdp.getVerifyImageUrl(err.codeString)
              });
            case 5:
            case 16:
            case 17:
            case 120016:
            case 120019:
            case 120021:
            case 400031:
            case 400032:
            case 400034:
            case 500010:
              return res.json({
                err: 'other',
                msg: "帐号异常，请前往百度盘检查！"
              });
            default:
              return res.json({
                err: 'unknown'
              });
          }
        } else {
          return res.json({
            err: 'system_error'
          });
        }
      } else {
        res.cookie('uk', uk, {
          signed: true
        });
        return res.json({
          err: 'ok'
        });
      }
    };
    bdp = BDP();
    return bdp.refreshToken(function(err) {
      if (err) {
        return onLoginEnd(err);
      }
      return bdp.login(username, password, codeString, captcha, function(err) {
        var Users;
        if (err) {
          return onLoginEnd(err);
        }
        Users = req.models.Users;
        return Users.findOne({
          username: username
        }, function(err, user) {
          if (err) {
            return onLoginEnd(err);
          }
          if (user) {
            user.password = savePassword;
            user.cookie = bdp.getCookieStr();
            return user.save(function(err) {
              return onLoginEnd(err, user.uk);
            });
          } else {
            return bdp.getUK(function(err, uk) {
              if (err) {
                return onLoginEnd(err);
              }
              return Users.createOne({
                username: username,
                password: savePassword,
                uk: uk,
                cookie: bdp.getCookieStr(),
                token: uuid.v4()
              }, function(err, user) {
                return onLoginEnd(err, uk);
              });
            });
          }
        });
      });
    });
  });

  router.post("/a/share", function(req, res) {
    var doReply;
    path = req.body.path;
    if (!path) {
      return res.json({
        err: 'invalid_args'
      });
    }
    doReply = function(share) {
      var transferCode, transferUrl;
      transferCode = utils.encodeShareCode(share.id);
      transferUrl = req.protocol + '://' + req.get('host') + req.baseUrl + '/transfer/' + transferCode;
      return res.json({
        err: 'ok',
        transferCode: transferCode,
        transferUrl: transferUrl
      });
    };
    return checkUserLogined(req, res, function(err, user) {
      var Shares;
      Shares = req.models.Shares;
      return Shares.findOne({
        uk: user.uk,
        path: path
      }, function(err, share) {
        var bdp;
        if (err) {
          return res.json({
            err: 'system_error'
          });
        }
        if (share) {
          return doReply(share);
        } else {
          bdp = BDP(user.cookie);
          return bdp.getFileMeta(path, function(err, info) {
            var pass;
            if (err) {
              return res.json({
                err: 'unknown'
              });
            }
            if (info) {
              pass = utils.genPassword();
              return bdp.share(info.fs_id, pass, function(err, info) {
                if (err) {
                  return res.json({
                    err: 'unknown'
                  });
                } else {
                  return Shares.createOne({
                    shareid: info.shareid,
                    uk: info.uk,
                    pass: pass,
                    path: path
                  }, function(err, share) {
                    if (err) {
                      return res.json({
                        err: 'system_error'
                      });
                    }
                    return doReply(share);
                  });
                }
              });
            } else {
              return res.json({
                err: 'file_not_found'
              });
            }
          });
        }
      });
    });
  });

  router.post("/a/unshare", function(req, res) {
    var code;
    code = req.body.code;
    if (!code) {
      return res.json({
        err: 'invalid_args'
      });
    }
    return checkUserLogined(req, res, function(err, user) {
      var Shares;
      Shares = req.models.Shares;
      return Shares.findOne({
        id: utils.decodeShareCode(code)
      }, function(err, share) {
        if (err) {
          return res.json({
            err: 'system_error'
          });
        }
        if (share) {
          if (share.uk === user.uk) {
            return share.remove(function(err) {
              if (err) {
                return res.json({
                  err: 'system_error'
                });
              }
              return res.json({
                err: 'ok'
              });
            });
          } else {
            return res.json({
              err: 'ok'
            });
          }
        } else {
          return res.json({
            err: 'ok'
          });
        }
      });
    });
  });

  router.post("/a/transfer", function(req, res) {
    var code;
    code = req.body.code;
    if (!code) {
      return res.json({
        err: 'invalid_args'
      });
    }
    return checkUserLogined(req, res, function(err, user) {
      var Shares;
      Shares = req.models.Shares;
      return Shares.findOne({
        id: utils.decodeShareCode(code)
      }, function(err, share) {
        var bdp, destPath;
        if (err) {
          return res.json({
            err: 'system_error'
          });
        }
        if (share) {
          if (share.uk === user.uk) {
            return res.json({
              err: 'other',
              msg: '请不要转存自己的文件'
            });
          } else {
            bdp = BDP(user.cookie);
            destPath = '/';
            return bdp.transfer(share.shareid, share.uk, share.pass, share.path, destPath, function(err) {
              if (err) {
                if (err.name === "RESTError") {
                  switch (err.errno) {
                    case -7:
                    case -8:
                    case -16:
                    case -17:
                      return res.json({
                        err: 'other',
                        msg: '分享已失效！'
                      });
                    case -32:
                      return res.json({
                        err: 'other',
                        msg: '空间不足！'
                      });
                    default:
                      return res.json({
                        err: 'unknown'
                      });
                  }
                } else {
                  return res.json({
                    err: 'unknown'
                  });
                }
              } else {
                return res.json({
                  err: 'ok',
                  destPath: destPath
                });
              }
            });
          }
        } else {
          return res.json({
            err: 'file_not_found'
          });
        }
      });
    });
  });

  app.use(config.root, router);

  app.listen(8080);

  console.log('Running on http://0.0.0.0:8080');

}).call(this);
